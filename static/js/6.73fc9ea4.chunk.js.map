{"version":3,"sources":["pages/LoginPage.jsx"],"names":["INITIAL_VALUES","email","password","Login","dispatch","useDispatch","errorMessage","useSelector","getErrorMessage","useState","showPassword","setShowPassword","validate","useCallback","values","errors","test","length","handleSubmit","setSubmitting","logIn","handleClickShowPassword","className","styles","authFormWrapper","authFormTitle","initialValues","onSubmit","isSubmitting","touched","handleBlur","handleChange","authForm","fullWidth","id","name","label","value","onChange","onBlur","error","Boolean","helperText","sx","display","type","onClick","color","variant","disabled","Object","keys","severity"],"mappings":"wWAaMA,EAAiB,CACnBC,MAAO,GACPC,SAAU,IAGRC,EAAQ,WACV,IAAMC,EAAWC,cACXC,EAAeC,YAAYC,KACjC,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAWC,uBAAY,SAACC,GAC1B,IAAMC,EAAS,GAef,OAdKD,EAAOb,MAGP,2CAA2Ce,KAAKF,EAAOb,SAExDc,EAAOd,MAAQ,yBAJfc,EAAOd,MAAQ,WAOda,EAAOZ,SAEDY,EAAOZ,SAASe,OAAS,IAChCF,EAAOb,SAAW,+CAFlBa,EAAOb,SAAW,WAKfa,IACR,IAEGG,EAAeL,uBAAY,SAACC,EAAD,GAAgC,IAArBK,EAAoB,EAApBA,cACxCf,EAASgB,YAAMN,IACfK,GAAc,KACf,CAACf,IAEEiB,EAA0B,WAC5BV,GAAgB,SAAAD,GAAY,OAAKA,MAGrC,OACI,sBAAKY,UAAWC,IAAOC,gBAAvB,UACI,oBAAIF,UAAWC,IAAOE,cAAtB,wBACA,cAAC,IAAD,CACAC,cAAe1B,EACfY,SAAUA,EACVe,SAAUT,EAHV,SAKC,gBAAGU,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,OAAQD,EAAlC,EAAkCA,OAAQI,EAA1C,EAA0CA,aAAcY,EAAxD,EAAwDA,WAAYC,EAApE,EAAoEA,aAApE,OACG,uBAAMJ,SAAUT,EAAcI,UAAWC,IAAOS,SAAhD,UACA,cAAC,IAAD,CACAC,WAAS,EACTC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,MAAOvB,EAAOb,MACdqC,SAAUP,EACVQ,OAAQT,EACRU,MAAOX,EAAQ5B,OAASwC,QAAQ1B,EAAOd,OACvCyC,WAAYb,EAAQ5B,OAASc,EAAOd,QAEpC,eAAC,IAAD,CAAK0C,GAAI,CAAEC,QAAS,QAApB,UACI,cAAC,IAAD,CACAX,WAAS,EACTC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNS,KAAMnC,EAAc,OAAS,WAC7B2B,MAAOvB,EAAOZ,SACdoC,SAAUP,EACVQ,OAAQT,EACRU,MAAOX,EAAQ3B,UAAYuC,QAAQ1B,EAAOb,UAC1CwC,WAAYb,EAAQ3B,UAAYa,EAAOb,WAEvC,cAAC,IAAD,CACI4C,QAASzB,EADb,SAGKX,EAAe,cAAC,IAAD,IAAwB,cAAC,IAAD,SAIhD,cAAC,IAAD,CACIqC,MAAM,UACNC,QAAQ,YACRf,WAAS,EAACY,KAAK,SACfI,SACIrB,KAEIsB,OAAOC,KAAKtB,GAASZ,SACrBiC,OAAOC,KAAKnD,GAAgBiB,QACG,IAA/BiC,OAAOC,KAAKpC,GAAQE,QAThC,0BAmBHX,GAAgB,cAAC,IAAD,CAAO8C,SAAS,QAAhB,SACZ9C","file":"static/js/6.73fc9ea4.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logIn } from '../redux/auth/authOperations';\r\nimport { getErrorMessage } from '../redux/auth/authSelectors';\r\nimport { Formik } from 'formik';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport Alert from '@mui/material/Alert';\r\nimport styles from './Pages.module.css';\r\n\r\nconst INITIAL_VALUES = {\r\n    email: \"\",\r\n    password: \"\",\r\n};\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const errorMessage = useSelector(getErrorMessage);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const validate = useCallback((values) => {\r\n        const errors = {};\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (\r\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = 'Required';\r\n        } else if (values.password.length < 8) {\r\n            errors.password = 'Password should contain more then 8 symbols';\r\n        }\r\n\r\n        return errors;\r\n    }, []);\r\n\r\n    const handleSubmit = useCallback((values, { setSubmitting }) => {\r\n        dispatch(logIn(values));\r\n        setSubmitting(false); \r\n    }, [dispatch]);\r\n\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(showPassword => !showPassword);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.authFormWrapper}>\r\n            <h2 className={styles.authFormTitle}>Login form</h2>\r\n            <Formik\r\n            initialValues={INITIAL_VALUES}\r\n            validate={validate}\r\n            onSubmit={handleSubmit}\r\n            >\r\n            {({ isSubmitting, touched, errors, values, handleSubmit, handleBlur, handleChange }) => (\r\n                <form onSubmit={handleSubmit} className={styles.authForm}>\r\n                <TextField\r\n                fullWidth\r\n                id=\"email\"\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                value={values.email}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                error={touched.email && Boolean(errors.email)}\r\n                helperText={touched.email && errors.email}\r\n                />\r\n                <Box sx={{ display: 'flex'}}>\r\n                    <TextField\r\n                    fullWidth\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type={showPassword? \"text\" : \"password\"}\r\n                    value={values.password}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.password && Boolean(errors.password)}\r\n                    helperText={touched.password && errors.password}\r\n                    />\r\n                    <Button \r\n                        onClick={handleClickShowPassword}\r\n                    > \r\n                        {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\r\n                    </Button>\r\n                </Box>\r\n\r\n                <Button \r\n                    color=\"primary\" \r\n                    variant=\"contained\" \r\n                    fullWidth type=\"submit\"\r\n                    disabled={\r\n                        isSubmitting\r\n                        || !(\r\n                            Object.keys(touched).length ===\r\n                            Object.keys(INITIAL_VALUES).length &&\r\n                            Object.keys(errors).length === 0\r\n                        )\r\n                    }\r\n                >\r\n                Submit\r\n                </Button>\r\n            </form>\r\n            )}\r\n            </Formik>\r\n\r\n            {errorMessage && <Alert severity=\"error\">\r\n                {errorMessage}\r\n            </Alert>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Login };"],"sourceRoot":""}