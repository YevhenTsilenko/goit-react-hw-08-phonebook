{"version":3,"sources":["pages/Pages.module.css","pages/RegistrationPage.jsx"],"names":["module","exports","INITIAL_VALUES","name","email","password","Registration","dispatch","useDispatch","errorMessage","useSelector","getErrorMessage","useState","showPassword","setShowPassword","validate","useCallback","values","errors","length","test","handleSubmit","setSubmitting","console","log","registration","handleClickShowPassword","className","styles","authFormWrapper","authFormTitle","initialValues","onSubmit","isSubmitting","touched","handleBlur","handleChange","authForm","formText","fullWidth","id","label","value","onBlur","onChange","error","Boolean","helperText","sx","display","type","onClick","color","variant","disabled","Object","keys","severity"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,cAAgB,6BAA6B,SAAW,wBAAwB,KAAO,oBAAoB,SAAW,0B,6LCanLC,EAAiB,CACnBC,KAAM,GACNC,MAAO,GACPC,SAAU,IA2HCC,UAxHM,WACjB,IAAMC,EAAWC,cACXC,EAAeC,YAAYC,KACjC,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAWC,uBAAY,SAACC,GAC1B,IAAMC,EAAS,GAqBf,OApBKD,EAAOd,KAEDc,EAAOd,KAAKgB,OAAS,IAC5BD,EAAOf,KAAO,yCAFde,EAAOf,KAAO,WAKbc,EAAOb,MAGP,2CAA2CgB,KAAKH,EAAOb,SAExDc,EAAOd,MAAQ,yBAJfc,EAAOd,MAAQ,WAOda,EAAOZ,SAEDY,EAAOZ,SAASc,OAAS,IAChCD,EAAOb,SAAW,6CAFlBa,EAAOb,SAAW,WAKfa,IACR,IAEGG,EAAeL,uBAAY,SAACC,EAAD,GAAgC,IAArBK,EAAoB,EAApBA,cACxCC,QAAQC,IAAI,SAAUP,GACtBV,EAASkB,YAAaR,IACtBK,GAAc,KACf,CAACf,IAEEmB,EAA0B,WAC5BZ,GAAgB,SAAAD,GAAY,OAAKA,MAGrC,OACI,sBAAKc,UAAWC,IAAOC,gBAAvB,UACI,oBAAIF,UAAWC,IAAOE,cAAtB,0BACA,cAAC,IAAD,CACAC,cAAe7B,EACfa,SAAUA,EACViB,SAAUX,EAHV,SAKC,gBAAGY,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAAShB,EAA1B,EAA0BA,OAAQD,EAAlC,EAAkCA,OAAQkB,EAA1C,EAA0CA,WAAYC,EAAtD,EAAsDA,aAAcf,EAApE,EAAoEA,aAApE,OACG,uBAAMW,SAAUX,EAAcM,UAAWC,IAAOS,SAAhD,UACI,cAAC,IAAD,CACAV,UAAWC,IAAOU,SAClBC,WAAS,EACTC,GAAG,OACHrC,KAAK,OACLsC,MAAM,OACNC,MAAOzB,EAAOd,KACdwC,OAAQR,EACRS,SAAUR,EACVS,MAAOX,EAAQ/B,MAAQ2C,QAAQ5B,EAAOf,MACtC4C,WAAYb,EAAQ/B,MAAQe,EAAOf,OAEnC,cAAC,IAAD,CACAoC,WAAS,EACTC,GAAG,QACHrC,KAAK,QACLsC,MAAM,QACNC,MAAOzB,EAAOb,MACdwC,SAAUR,EACVO,OAAQR,EACRU,MAAOX,EAAQ9B,OAAS0C,QAAQ5B,EAAOd,OACvC2C,WAAYb,EAAQ9B,OAASc,EAAOd,QAEpC,eAAC,IAAD,CAAK4C,GAAI,CAAEC,QAAS,QAApB,UACI,cAAC,IAAD,CACAV,WAAS,EACTC,GAAG,WACHrC,KAAK,WACLsC,MAAM,WACNS,KAAMrC,EAAc,OAAS,WAC7B6B,MAAOzB,EAAOZ,SACduC,SAAUR,EACVO,OAAQR,EACRU,MAAOX,EAAQ7B,UAAYyC,QAAQ5B,EAAOb,UAC1C0C,WAAYb,EAAQ7B,UAAYa,EAAOb,WAEvC,cAAC,IAAD,CACI8C,QAASzB,EADb,SAGKb,EAAe,cAAC,IAAD,IAAwB,cAAC,IAAD,SAIhD,cAAC,IAAD,CACIuC,MAAM,UACNC,QAAQ,YACRd,WAAS,EAACW,KAAK,SACfI,SACIrB,KAEIsB,OAAOC,KAAKtB,GAASf,SACrBoC,OAAOC,KAAKtD,GAAgBiB,QACG,IAA/BoC,OAAOC,KAAKtC,GAAQC,QAThC,0BAoBPV,GAAgB,cAAC,IAAD,CAAOgD,SAAS,QAAhB,SACZhD","file":"static/js/8.620be372.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"authFormWrapper\":\"Pages_authFormWrapper__3mCYn\",\"authFormTitle\":\"Pages_authFormTitle__p7Ty-\",\"formText\":\"Pages_formText__TfdLR\",\"text\":\"Pages_text__3sQN_\",\"textLink\":\"Pages_textLink__1JllG\"};","import React, { useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { registration } from '../redux/auth/authOperations';\r\nimport { getErrorMessage } from '../redux/auth/authSelectors';\r\nimport { Formik } from 'formik';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport Alert from '@mui/material/Alert';\r\nimport styles from './Pages.module.css';\r\n\r\n\r\nconst INITIAL_VALUES = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n};\r\n\r\nconst Registration = () => {\r\n    const dispatch = useDispatch();\r\n    const errorMessage = useSelector(getErrorMessage);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const validate = useCallback((values) => {\r\n        const errors = {};\r\n        if (!values.name) {\r\n            errors.name = 'Required';\r\n        } else if (values.name.length < 3) {\r\n            errors.name = 'Name must contain more then 3 symbols';\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (\r\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = 'Required';\r\n        } else if (values.password.length < 8) {\r\n            errors.password = 'Password must contain more then 8 symbols';\r\n        }\r\n\r\n        return errors;\r\n    }, []);\r\n\r\n    const handleSubmit = useCallback((values, { setSubmitting }) => {\r\n        console.log('values', values);\r\n        dispatch(registration(values));\r\n        setSubmitting(false);\r\n    }, [dispatch]);\r\n    \r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(showPassword => !showPassword);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.authFormWrapper}>\r\n            <h2 className={styles.authFormTitle}>Registration</h2>\r\n            <Formik\r\n            initialValues={INITIAL_VALUES}\r\n            validate={validate}\r\n            onSubmit={handleSubmit}\r\n            >\r\n            {({ isSubmitting, touched, errors, values, handleBlur, handleChange, handleSubmit }) => (\r\n                <form onSubmit={handleSubmit} className={styles.authForm}>\r\n                    <TextField\r\n                    className={styles.formText}\r\n                    fullWidth\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    label=\"Name\"\r\n                    value={values.name}\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    error={touched.name && Boolean(errors.name)}\r\n                    helperText={touched.name && errors.name}\r\n                    />\r\n                    <TextField\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    value={values.email}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.email && Boolean(errors.email)}\r\n                    helperText={touched.email && errors.email}\r\n                    />\r\n                    <Box sx={{ display: 'flex'}}>\r\n                        <TextField\r\n                        fullWidth\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type={showPassword? \"text\" : \"password\"}\r\n                        value={values.password}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        error={touched.password && Boolean(errors.password)}\r\n                        helperText={touched.password && errors.password}\r\n                        />\r\n                        <Button \r\n                            onClick={handleClickShowPassword}\r\n                        > \r\n                            {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\r\n                        </Button>\r\n                    </Box>\r\n\r\n                    <Button \r\n                        color=\"primary\" \r\n                        variant=\"contained\" \r\n                        fullWidth type=\"submit\"\r\n                        disabled={\r\n                            isSubmitting\r\n                            || !(\r\n                                Object.keys(touched).length ===\r\n                                Object.keys(INITIAL_VALUES).length &&\r\n                                Object.keys(errors).length === 0\r\n                            )\r\n                        }\r\n                    >\r\n                    Submit\r\n                    </Button>\r\n                </form>\r\n            )}\r\n            </Formik>\r\n\r\n\r\n            {errorMessage && <Alert severity=\"error\">\r\n                {errorMessage}\r\n            </Alert>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Registration;"],"sourceRoot":""}