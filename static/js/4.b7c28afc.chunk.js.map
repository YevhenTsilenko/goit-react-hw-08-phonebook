{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/ContactList/ContactList.module.css","components/Button/Button.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","redux/contacts/selectors.js","redux/contacts/operations.js","components/ContactList/ContactList.jsx","components/Button/Button.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Phonebook/Phonebook.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","getContacts","state","contacts","items","getIsLoading","loading","getFilter","filter","getFilteredContacts","createSelector","allContacts","lowerCasedFilter","toLocaleLowerCase","trim","contact","name","includes","axios","defaults","baseURL","connect","dispatch","onDelete","id","deleteContactRequest","delete","then","deleteContactSuccess","catch","error","deleteContactError","deleteContact","a","getContactsRequest","get","data","getContactsSuccess","getContactsError","useEffect","className","styles","contact_list","map","number","delete_button","type","onClick","Button","btnName","disabled","button","isLoading","onSubmit","addContactRequest","post","addContactSuccess","addContactError","addContact","useState","setName","setNumber","reset","e","preventDefault","names","toLowerCase","currentName","console","log","alert","form","label","form_input","pattern","title","required","onChange","currentTarget","Loader","evt","filterContacts","target","input"],"mappings":"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","file":"static/js/4.b7c28afc.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__1M4yg\",\"contact\":\"ContactList_contact__3d7SC\",\"delete_button\":\"ContactList_delete_button__CLyhe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__mLjZ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2LwVX\",\"label\":\"ContactForm_label__1Iyo8\",\"form_input\":\"ContactForm_form_input__1F0J2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__AXNLs\",\"input\":\"Filter_input__2Aidi\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst getIsLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getFilteredContacts = createSelector(\r\n    [getContacts, getFilter], \r\n    (allContacts, filter) => {\r\n        const lowerCasedFilter = filter.toLocaleLowerCase().trim();\r\n        return allContacts.filter(contact => \r\n            contact.name.toLocaleLowerCase().includes(lowerCasedFilter));\r\n    },\r\n);\r\n\r\nexport { getContacts, getIsLoading, getFilter, getFilteredContacts }","import { \r\n    getContactsRequest, getContactsSuccess, getContactsError,\r\n    addContactRequest, addContactSuccess, addContactError,\r\n    deleteContactRequest, deleteContactSuccess, deleteContactError\r\n  } from './actions';\r\n  import axios from \"axios\";\r\n  \r\n  axios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n  \r\n  const getContacts = () => async dispatch => {\r\n    dispatch(getContactsRequest());\r\n    try {\r\n       const { data } = await axios.get('/contacts');\r\n        dispatch(getContactsSuccess(data));\r\n    } catch (error) {\r\n        dispatch(getContactsError(error));\r\n    };\r\n  };\r\n  \r\n   const addContact = (name, number) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n    };  \r\n\r\n    dispatch(addContactRequest());\r\n  \r\n    axios.post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n  };\r\n  \r\n  const deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n  \r\n    axios.delete(`/contacts/${id}`)\r\n      .then(() => dispatch(deleteContactSuccess(id)))\r\n      .catch(error => dispatch(deleteContactError(error)));\r\n  };\r\n\r\nexport { getContacts, addContact, deleteContact }","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact, getContacts } from '../../redux/contacts/operations';\r\nimport { getFilteredContacts } from '../../redux/contacts/selectors';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\n\r\nfunction ContactList ({ contacts, onDelete,getContacts}) {\r\n    useEffect(() => {\r\n      getContacts();\r\n    }, [getContacts])\r\n\r\n    return (\r\n        <ul className={styles.contact_list}>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li key={id} className={styles.contact}>\r\n            <span>\r\n              {name}: {number}\r\n            </span>\r\n            <button\r\n              className={styles.delete_button}\r\n              type=\"button\"\r\n              onClick={() => onDelete(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getFilteredContacts(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDelete: id => dispatch(deleteContact(id)),\r\n  getContacts: () => dispatch(getContacts())\r\n});\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  getContacts: PropTypes.func,\r\n  \r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import styles from './Button.module.css';\r\n\r\nfunction Button({ type, onClick, btnName, disabled }) {\r\n    return (\r\n      <button\r\n        type={type}\r\n        className={styles.button}\r\n        onClick={onClick}\r\n        disabled={disabled}\r\n      >\r\n        {btnName}\r\n      </button>\r\n    );\r\n  }\r\n  \r\n  export { Button };","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/operations';\r\nimport { getIsLoading, getContacts } from '../../redux/contacts/selectors';\r\nimport { Button } from '../Button/Button';\r\nimport { Loader } from '../Loader/Loader';\r\nimport styles from './ContactForm.module.css';\r\n\r\nfunction ContactForm({ contacts, onSubmit, isLoading }) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n     \r\n    const hendleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const names = contacts.map((contact) => contact.name.toLowerCase());\r\n        const currentName = name.toLowerCase()\r\n        console.log(currentName)\r\n        if(names.includes(currentName))  {\r\n           return alert(`${name} is already exists`);\r\n        }\r\n\r\n        onSubmit(name, number);\r\n        reset();\r\n    };\r\n    \r\n    const reset = () => {\r\n        setName(\"\");\r\n        setNumber(\"\");\r\n    };\r\n        return (\r\n            <>\r\n                <form onSubmit={hendleSubmit} className={styles.form}>\r\n                    \r\n                    <label className={styles.label}>\r\n                    Name\r\n                        <input \r\n                            className={styles.form_input}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                            value={name}\r\n                            onChange={(e) => {\r\n                                setName(e.currentTarget.value);\r\n                            }}/>\r\n                    </label>\r\n                    <label className={styles.label}>\r\n                    Number\r\n                        <input \r\n                            className={styles.form_input}\r\n                            type=\"tel\"\r\n                            name=\"number\"\r\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            required\r\n                            value={number}\r\n                            onChange={(e) => {\r\n                                setNumber(e.currentTarget.value);\r\n                            }}/>\r\n                    </label>\r\n                    <Button type=\"submit\" btnName=\"Add contact\" disabled={!(name && number)} />\r\n                </form>\r\n                {isLoading && <Loader />}\r\n            </>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading: getIsLoading(state),\r\n    contacts: getContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nContactForm.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onSubmit: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import { connect } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts/selectors';\r\nimport { filterContacts } from '../../redux/contacts/actions';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nfunction Filter({ value, onChange }) {\r\n    return (\r\n        <label className={styles.label}>\r\n            Find contacts by name\r\n                <input type=\"text\" value={value} onChange={onChange} className={styles.input}/>\r\n        </label>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    value: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: evt => dispatch(filterContacts(evt.target.value)),\r\n});\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { getContacts } from '../../redux/contacts/selectors';\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport Filter from \"../Filter/Filter\";\r\n\r\nfunction Phonebook ({ contacts }) {\r\n    return (\r\n        <div>\r\n            <h1>Phonebook</h1>\r\n            <ContactForm />\r\n            {contacts.length > 0 &&\r\n            <> \r\n            <Filter />\r\n            <h2>Contacts</h2>\r\n            </>\r\n            }\r\n            <ContactList />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contacts: getContacts(state),\r\n});\r\n  \r\nPhonebook.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Phonebook);"],"sourceRoot":""}