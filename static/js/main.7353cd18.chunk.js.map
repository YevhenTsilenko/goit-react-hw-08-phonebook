{"version":3,"sources":["components/PrivateRoute.js","components/PublicRoute.js","components/UserNavigation/UserNavigation.jsx","components/AuthNavigation/AuthNavigation.jsx","components/UserMenu/UserMenu.jsx","components/Appbar/Appbar.jsx","App.js","redux/contacts/redusers.js","redux/auth/auth-slice.js","redux/store.js","index.js","redux/auth/authOperations.js","redux/auth/authSelectors.js","components/Loader/Loader.jsx","components/Loader/Loader.module.css","redux/contacts/actions.js"],"names":["PrivateRoute","children","redirectTo","routeProps","isLoggedIn","useSelector","getIsLoggedIn","to","PublicRoute","restricted","shouldRedirect","UserNavigation","exact","className","styles","navLink","activeClassName","navActiveLink","AuthNavigation","style","link","activeStyle","activeLink","UserMenu","dispatch","useDispatch","name","getUsername","userGreating","logOutBtn","onClick","logOut","Appbar","header","HomePage","lazy","NoSuchPage","Registration","Login","Phonebook","App","isRefreshingUser","getIsRefreshingUser","useEffect","getCurrentUser","fallback","Loader","path","component","items","createReducer","getContactsSuccess","_","payload","addContactSuccess","state","deleteContactSuccess","filter","contact","id","filterContacts","loading","getContactsRequest","getContactsError","addContactRequest","addContactError","deleteContactRequest","deleteContactError","error","combineReducer","combineReducers","authSlice","createSlice","initialState","user","email","token","errorMessage","extraReducers","registration","fulfilled","action","rejected","logIn","pending","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contacts","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","axios","defaults","baseURL","headers","common","Authorization","createAsyncThunk","credentials","thunkAPI","a","post","data","rejectWithValue","Error","massage","getState","persistedToken","get","getErrorMessage","type","color","height","width","timeout","module","exports","createAction"],"mappings":"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","file":"static/js/main.7353cd18.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { getIsLoggedIn } from '../redux/auth/authSelectors';\r\n\r\nfunction PrivateRoute({\r\n    children,\r\n    redirectTo,\r\n    ...routeProps\r\n}) {\r\n    const isLoggedIn = useSelector(getIsLoggedIn);\r\n    return (\r\n        <Route {...routeProps}>\r\n            {isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n        </Route>\r\n    );\r\n};\r\n\r\nexport { PrivateRoute };","import { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { getIsLoggedIn } from '../redux/auth/authSelectors';\r\n\r\nfunction PublicRoute({\r\n  children,\r\n  restricted = false,\r\n  redirectTo = '/',\r\n  ...routeProps\r\n}) {\r\n  const isLoggedIn = useSelector(getIsLoggedIn);\r\n  const shouldRedirect = isLoggedIn && restricted;\r\n  \r\n  return (\r\n    <Route {...routeProps}>\r\n      {shouldRedirect ? <Redirect to={redirectTo} /> : children}\r\n    </Route>\r\n  );\r\n}\r\n\r\nexport { PublicRoute };","import { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { getIsLoggedIn } from '../../redux/auth/authSelectors';\r\nimport styles from '../AuthNavigation/AuthNav.module.css';\r\n\r\nconst UserNavigation = () => {\r\n    const isLoggedIn = useSelector(getIsLoggedIn);\r\n    return (\r\n        <div>\r\n            <NavLink \r\n                to='/'\r\n                exact\r\n                className={styles.navLink}\r\n                activeClassName={styles.navActiveLink}\r\n            >\r\n                Home\r\n            </NavLink>\r\n\r\n            {isLoggedIn &&\r\n                <NavLink \r\n                    to='/contacts'\r\n                    className={styles.navLink}\r\n                    activeClassName={styles.navActiveLink}\r\n                >\r\n                    Contacts\r\n                </NavLink>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { UserNavigation };","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './AuthNav.module.css';\r\n\r\nfunction AuthNavigation() {\r\n  return (\r\n    <div>\r\n      <NavLink\r\n        to=\"/register\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Signup\r\n      </NavLink>\r\n      <NavLink\r\n        to=\"/login\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Login\r\n      </NavLink>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport { AuthNavigation };","import { useDispatch, useSelector } from 'react-redux';\r\nimport { logOut } from '../../redux/auth/authOperations';\r\nimport { getUsername } from '../../redux/auth/authSelectors';\r\nimport styles from './UserMenu.module.css';\r\n\r\nconst UserMenu = () => {\r\n    const dispatch = useDispatch();\r\n    const name = useSelector(getUsername);\r\n\r\n    return (\r\n        <div className={styles.UserMenu}>\r\n\r\n            <p className={styles.userGreating}>Hi, {name}. It's your private office.</p>\r\n            <button \r\n                className={styles.logOutBtn}\r\n                onClick={() => dispatch(logOut())}\r\n            >\r\n                Log out\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport { UserMenu };","import { useSelector } from \"react-redux\";\r\nimport {UserNavigation} from \"../UserNavigation/UserNavigation\";\r\nimport {AuthNavigation} from \"../AuthNavigation/AuthNavigation\";\r\nimport {UserMenu} from \"../UserMenu/UserMenu\";\r\nimport styles from './Appbar.module.css';\r\nimport { getIsLoggedIn } from '../../redux/auth/authSelectors';\r\n\r\nconst Appbar = () => {\r\n    const isLoggedIn = useSelector(getIsLoggedIn);\r\n    return (\r\n        <header className={styles.header}>\r\n            <UserNavigation />\r\n            {isLoggedIn ? <UserMenu /> : <AuthNavigation />}\r\n        </header>\r\n    );\r\n};\r\n\r\nexport { Appbar };","import { lazy, Suspense, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport { PrivateRoute } from './components/PrivateRoute';\nimport { PublicRoute } from './components/PublicRoute';\nimport { Loader } from './components/Loader/Loader';\nimport { Appbar } from './components/Appbar/Appbar';\nimport{ getCurrentUser } from './redux/auth/authOperations';\nimport{ getIsRefreshingUser } from './redux/auth/authSelectors';\nimport './App.css';\n\nconst HomePage = lazy(() => import('./pages/HomePage'));\nconst NoSuchPage = lazy(() => import('./pages/ErrorPage'));\nconst Registration = lazy(() => import('./pages/RegistrationPage'));\nconst Login = lazy(() => import('./pages/LoginPage'));\nconst Phonebook = lazy(() => import('./components/Phonebook/Phonebook'));\n\nfunction App () {\n  const dispatch = useDispatch();\n  const isRefreshingUser = useSelector(getIsRefreshingUser);\n\n  useEffect(() => {\n    dispatch(getCurrentUser());\n  }, [dispatch]);\n\n  return (\n    !isRefreshingUser && (\n      <div className=\"App\">\n        <Appbar />\n        \n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <PublicRoute exact path=\"/\">\n              <HomePage />\n            </PublicRoute>\n\n            <PublicRoute path=\"/register\" restricted>\n              <Registration />\n            </PublicRoute>\n\n            <PublicRoute path=\"/login\" restricted redirectTo=\"/contacts\">\n              <Login />\n            </PublicRoute>\n\n            <PrivateRoute path=\"/contacts\" redirectTo=\"/login\">\n              <Phonebook />\n            </PrivateRoute>\n\n            <Route component={NoSuchPage} />\n          </Switch>\n        </Suspense>\n      </div>\n    )\n  )\n};\n\n\n\nexport default App;\n\n\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { \r\n  getContactsRequest, getContactsSuccess, getContactsError,\r\n  addContactRequest, addContactSuccess, addContactError,\r\n  deleteContactRequest, deleteContactSuccess, deleteContactError,\r\n  filterContacts\r\n} from './actions';\r\n\r\nconst items = createReducer(\r\n  [],\r\n  {\r\n    [getContactsSuccess]: (_, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) =>\r\n      state.filter(contact => contact.id !== payload),\r\n  },\r\n);\r\n\r\nconst filter = createReducer('', {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [getContactsRequest]: () => true,\r\n  [getContactsSuccess]: () => false,\r\n  [getContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [getContactsError]: (_, {payload}) => payload,\r\n  [addContactError]: (_, {payload}) => payload,\r\n  [deleteContactError]: (_, {payload}) => payload,\r\n});\r\n\r\nconst combineReducer = combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n})\r\n\r\nexport { combineReducer }\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { registration, logIn, logOut, getCurrentUser } from './authOperations';\r\n\r\nconst initialState = {\r\n    user: { name: null, email: null },\r\n    token: null,\r\n    isLoggedIn: false,\r\n    isRefreshingUser: false,\r\n    errorMessage: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    extraReducers: {\r\n        [registration.fulfilled](state, action) {\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token;\r\n            state.isLoggedIn = true;\r\n            state.errorMessage = null;\r\n        },\r\n        [registration.rejected](state, action) {\r\n            state.errorMessage = action.payload;\r\n        },\r\n        [logIn.fulfilled](state, action) {\r\n            state.user = action.payload.user;\r\n            state.token = action.payload.token;\r\n            state.isLoggedIn = true;\r\n            state.errorMessage = null;\r\n        },\r\n        [logIn.rejected](state, action) {\r\n            state.errorMessage = action.payload;\r\n        },\r\n        [logOut.fulfilled](state, _) {\r\n            state.user = { name: null, email: null };\r\n            state.token = null;\r\n            state.isLoggedIn = false;\r\n        },\r\n        [getCurrentUser.pending](state) {\r\n            state.isRefreshingUser = true;\r\n        },\r\n        [getCurrentUser.fulfilled](state, action) {\r\n            state.user = action.payload;\r\n            state.isLoggedIn = true;\r\n            state.isRefreshingUser = false;\r\n        },\r\n        [getCurrentUser.rejected](state) {\r\n            state.isRefreshingUser = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport default authSlice.reducer;","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { \r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH, \r\n    REHYDRATE, \r\n    PAUSE, \r\n    PERSIST, \r\n    PURGE, \r\n    REGISTER \r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger'\r\nimport { combineReducer } from \"./contacts/redusers\";\r\nimport authReducer from './auth/auth-slice';\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n         },\r\n    }), \r\n    logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n    key: 'auth',\r\n    storage,\r\n    whitelist: ['token'],\r\n};\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        auth: persistReducer(authPersistConfig, authReducer),\r\n        contacts: combineReducer,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport './index.css';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n        <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n    set(token) {\r\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n    },\r\n    unset() {\r\n        axios.defaults.headers.common.Authorization = '';\r\n    },\r\n};\r\n\r\nconst registration = createAsyncThunk('auth/registration', async (credentials, thunkAPI) => {\r\n    try {\r\n        const { data } = await axios.post('/users/signup', credentials);\r\n        token.set(data.token);\r\n        return data;\r\n    } catch (error) {\r\n        return thunkAPI.rejectWithValue('Name already exists');\r\n    }\r\n});\r\n\r\nconst logIn = createAsyncThunk('auth/login', async (credentials, thunkAPI) => {\r\n    try {\r\n        const { data } = await axios.post('/users/login', credentials);\r\n        token.set(data.token);\r\n        return data;\r\n    } catch (error) {\r\n        return thunkAPI.rejectWithValue('Email or password is wrong, please try again');\r\n    }\r\n});\r\n\r\nconst logOut = createAsyncThunk('auth/logout', async () => {\r\n    try {\r\n        await axios.post('/users/logout');\r\n        token.unset();\r\n    } catch (error) {\r\n        return new Error(error.massage);\r\n    }\r\n});\r\n\r\nconst getCurrentUser = createAsyncThunk(\r\n    'auth/refresh', \r\n    async(_, thunkAPI) => {\r\n        const state = thunkAPI.getState();\r\n        const persistedToken = state.auth.token;\r\n\r\n        if(persistedToken === null) {\r\n            return thunkAPI.rejectWithValue();\r\n        }\r\n\r\n        token.set(persistedToken);\r\n        try {\r\n            const { data } = await axios.get('/users/current');\r\n            return data;\r\n        } catch (error) {\r\n            return error.massage;\r\n        }\r\n    },\r\n);\r\n\r\nexport { registration, logIn, logOut, getCurrentUser };","const getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\n\r\nconst getIsRefreshingUser = state => state.auth.isRefreshingUser;\r\n\r\nconst getErrorMessage = state => state.auth.errorMessage;\r\n\r\nexport{ getIsLoggedIn, getUsername, getIsRefreshingUser, getErrorMessage }","import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport LoaderSpinner from \"react-loader-spinner\";\r\nimport styles from './Loader.module.css';\r\n\r\nfunction Loader () {\r\n    return (\r\n        <div className={styles.Loader}>\r\n            <LoaderSpinner\r\n                type=\"Circles\"\r\n                color=\"#3f51b5\"\r\n                height={100}\r\n                width={100}\r\n                timeout={5000}\r\n                margin-left={100} \r\n                margin-top={10}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n} \r\n\r\nexport { Loader };","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__23WNQ\"};","import { createAction } from '@reduxjs/toolkit'\r\n\r\nconst getContactsRequest = createAction('contacts/getContactsRequest');\r\nconst getContactsSuccess = createAction('contacts/getContactsSuccess');\r\nconst getContactsError = createAction('contacts/getContactsError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nconst filterContacts = createAction('filter');\r\n\r\nexport { \r\n  getContactsRequest, getContactsSuccess, getContactsError,\r\n  addContactRequest, addContactSuccess, addContactError,\r\n  deleteContactRequest, deleteContactSuccess, deleteContactError,\r\n  filterContacts\r\n}\r\n\r\n"],"sourceRoot":""}